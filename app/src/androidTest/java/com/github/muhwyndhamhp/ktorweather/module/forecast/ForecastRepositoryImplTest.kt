package com.github.muhwyndhamhp.ktorweather.module.forecast

import android.content.Context
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.github.muhwyndhamhp.ktorweather.datasource.KtorWeatherDB
import com.github.muhwyndhamhp.ktorweather.datasource.OpenMeteoServicePipe
import com.github.muhwyndhamhp.ktorweather.datasource.WeatherDao
import com.github.muhwyndhamhp.ktorweather.datasource.provideOkHTTPClient
import com.github.muhwyndhamhp.ktorweather.datasource.provideOpenMeteoService
import com.github.muhwyndhamhp.ktorweather.datasource.provideOpenMeteoServicePipe
import com.github.muhwyndhamhp.ktorweather.datasource.provideRetrofit
import com.github.muhwyndhamhp.ktorweather.dtos.WeatherData
import com.github.muhwyndhamhp.ktorweather.modules.forecast.ForecastRepository
import com.github.muhwyndhamhp.ktorweather.modules.forecast.provideForecastRepo
import kotlinx.coroutines.flow.take
import kotlinx.coroutines.flow.toCollection
import kotlinx.coroutines.runBlocking
import okhttp3.mockwebserver.MockResponse
import okhttp3.mockwebserver.MockWebServer
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
class ForecastRepositoryImplTest {

    private lateinit var db: KtorWeatherDB
    private lateinit var dao: WeatherDao

    private lateinit var service: OpenMeteoServicePipe

    private lateinit var server: MockWebServer

    private lateinit var repo: ForecastRepository

    @Before
    fun setUp() {
        server = MockWebServer()
        val appContext = ApplicationProvider.getApplicationContext<Context>()
        db = Room.inMemoryDatabaseBuilder(
            appContext,
            KtorWeatherDB::class.java
        ).build()
        dao = db.weatherDao()
    }

    @After
    fun tearDown() {
//        server.shutdown()
//        db.close()
    }

    @Test
    fun return_weather_data_give_valid_network_response_and_empty_db() {
        server.enqueue(MockResponse().setBody(jsonResp))
        server.start()
        val httpUrl = server.url("")
        val retro = provideRetrofit(provideOkHTTPClient(), httpUrl)
        val retroService = provideOpenMeteoService(retro)
        service = provideOpenMeteoServicePipe(retroService)

        repo = provideForecastRepo(service, db)

        runBlocking {
            val results = mutableListOf<Result<WeatherData>>()
            repo.getLatestForecastData(-7.5, 110.875).take(2).toCollection(results)
            assert(results[0].isFailure)
            assert(results[0].exceptionOrNull()?.message == "Data Empty")

            assert(results[1].isSuccess)
            assert(results[1].getOrNull() != null)
            assert(results[1].getOrNull()?.id == 1L)
        }
    }

    val jsonResp = """     
{
  "latitude": -7.5,
  "longitude": 110.875,
  "generationtime_ms": 0.0820159912109375,
  "utc_offset_seconds": 25200,
  "timezone": "Asia/Bangkok",
  "timezone_abbreviation": "+07",
  "elevation": 100,
  "current_weather_units": {
    "time": "iso8601",
    "temperature": "°C",
    "windspeed": "km/h",
    "winddirection": "°",
    "is_day": "",
    "weathercode": "wmo code"
  },
  "current_weather_interval_seconds": 900,
  "current_weather": {
    "time": "2023-10-07T15:15",
    "temperature": 35.7,
    "windspeed": 14.9,
    "winddirection": 187,
    "is_day": 1,
    "weathercode": 3
  },
  "hourly_units": {
    "time": "iso8601",
    "temperature_2m": "°C",
    "relativehumidity_2m": "%",
    "weathercode": "wmo code",
    "windspeed_10m": "km/h"
  },
  "hourly": {
    "time": [
      "2023-10-07T00:00",
      "2023-10-07T01:00",
      "2023-10-07T02:00",
      "2023-10-07T03:00",
      "2023-10-07T04:00",
      "2023-10-07T05:00",
      "2023-10-07T06:00",
      "2023-10-07T07:00",
      "2023-10-07T08:00",
      "2023-10-07T09:00",
      "2023-10-07T10:00",
      "2023-10-07T11:00",
      "2023-10-07T12:00",
      "2023-10-07T13:00",
      "2023-10-07T14:00",
      "2023-10-07T15:00",
      "2023-10-07T16:00",
      "2023-10-07T17:00",
      "2023-10-07T18:00",
      "2023-10-07T19:00",
      "2023-10-07T20:00",
      "2023-10-07T21:00",
      "2023-10-07T22:00",
      "2023-10-07T23:00",
      "2023-10-08T00:00",
      "2023-10-08T01:00",
      "2023-10-08T02:00",
      "2023-10-08T03:00",
      "2023-10-08T04:00",
      "2023-10-08T05:00",
      "2023-10-08T06:00",
      "2023-10-08T07:00",
      "2023-10-08T08:00",
      "2023-10-08T09:00",
      "2023-10-08T10:00",
      "2023-10-08T11:00",
      "2023-10-08T12:00",
      "2023-10-08T13:00",
      "2023-10-08T14:00",
      "2023-10-08T15:00",
      "2023-10-08T16:00",
      "2023-10-08T17:00",
      "2023-10-08T18:00",
      "2023-10-08T19:00",
      "2023-10-08T20:00",
      "2023-10-08T21:00",
      "2023-10-08T22:00",
      "2023-10-08T23:00",
      "2023-10-09T00:00",
      "2023-10-09T01:00",
      "2023-10-09T02:00",
      "2023-10-09T03:00",
      "2023-10-09T04:00",
      "2023-10-09T05:00",
      "2023-10-09T06:00",
      "2023-10-09T07:00",
      "2023-10-09T08:00",
      "2023-10-09T09:00",
      "2023-10-09T10:00",
      "2023-10-09T11:00",
      "2023-10-09T12:00",
      "2023-10-09T13:00",
      "2023-10-09T14:00",
      "2023-10-09T15:00",
      "2023-10-09T16:00",
      "2023-10-09T17:00",
      "2023-10-09T18:00",
      "2023-10-09T19:00",
      "2023-10-09T20:00",
      "2023-10-09T21:00",
      "2023-10-09T22:00",
      "2023-10-09T23:00",
      "2023-10-10T00:00",
      "2023-10-10T01:00",
      "2023-10-10T02:00",
      "2023-10-10T03:00",
      "2023-10-10T04:00",
      "2023-10-10T05:00",
      "2023-10-10T06:00",
      "2023-10-10T07:00",
      "2023-10-10T08:00",
      "2023-10-10T09:00",
      "2023-10-10T10:00",
      "2023-10-10T11:00",
      "2023-10-10T12:00",
      "2023-10-10T13:00",
      "2023-10-10T14:00",
      "2023-10-10T15:00",
      "2023-10-10T16:00",
      "2023-10-10T17:00",
      "2023-10-10T18:00",
      "2023-10-10T19:00",
      "2023-10-10T20:00",
      "2023-10-10T21:00",
      "2023-10-10T22:00",
      "2023-10-10T23:00",
      "2023-10-11T00:00",
      "2023-10-11T01:00",
      "2023-10-11T02:00",
      "2023-10-11T03:00",
      "2023-10-11T04:00",
      "2023-10-11T05:00",
      "2023-10-11T06:00",
      "2023-10-11T07:00",
      "2023-10-11T08:00",
      "2023-10-11T09:00",
      "2023-10-11T10:00",
      "2023-10-11T11:00",
      "2023-10-11T12:00",
      "2023-10-11T13:00",
      "2023-10-11T14:00",
      "2023-10-11T15:00",
      "2023-10-11T16:00",
      "2023-10-11T17:00",
      "2023-10-11T18:00",
      "2023-10-11T19:00",
      "2023-10-11T20:00",
      "2023-10-11T21:00",
      "2023-10-11T22:00",
      "2023-10-11T23:00",
      "2023-10-12T00:00",
      "2023-10-12T01:00",
      "2023-10-12T02:00",
      "2023-10-12T03:00",
      "2023-10-12T04:00",
      "2023-10-12T05:00",
      "2023-10-12T06:00",
      "2023-10-12T07:00",
      "2023-10-12T08:00",
      "2023-10-12T09:00",
      "2023-10-12T10:00",
      "2023-10-12T11:00",
      "2023-10-12T12:00",
      "2023-10-12T13:00",
      "2023-10-12T14:00",
      "2023-10-12T15:00",
      "2023-10-12T16:00",
      "2023-10-12T17:00",
      "2023-10-12T18:00",
      "2023-10-12T19:00",
      "2023-10-12T20:00",
      "2023-10-12T21:00",
      "2023-10-12T22:00",
      "2023-10-12T23:00",
      "2023-10-13T00:00",
      "2023-10-13T01:00",
      "2023-10-13T02:00",
      "2023-10-13T03:00",
      "2023-10-13T04:00",
      "2023-10-13T05:00",
      "2023-10-13T06:00",
      "2023-10-13T07:00",
      "2023-10-13T08:00",
      "2023-10-13T09:00",
      "2023-10-13T10:00",
      "2023-10-13T11:00",
      "2023-10-13T12:00",
      "2023-10-13T13:00",
      "2023-10-13T14:00",
      "2023-10-13T15:00",
      "2023-10-13T16:00",
      "2023-10-13T17:00",
      "2023-10-13T18:00",
      "2023-10-13T19:00",
      "2023-10-13T20:00",
      "2023-10-13T21:00",
      "2023-10-13T22:00",
      "2023-10-13T23:00"
    ],
    "temperature_2m": [
      25.9,
      25.7,
      25.4,
      25.3,
      25.1,
      25,
      25.3,
      27.2,
      29.3,
      31.4,
      33.6,
      35.4,
      36.5,
      37.1,
      37.2,
      36.3,
      33.7,
      32.6,
      30.5,
      28.6,
      27.4,
      27,
      26.4,
      25.7,
      25.3,
      25.1,
      25,
      25,
      24.9,
      24.9,
      25,
      26.3,
      28.1,
      30.2,
      32.3,
      34,
      35,
      35.8,
      36.5,
      37,
      36.5,
      33,
      30.4,
      29.8,
      29.3,
      28.3,
      27.6,
      27,
      26.3,
      25.6,
      25,
      24.6,
      24.3,
      24.1,
      24.3,
      26.4,
      28.6,
      31,
      33.3,
      35.3,
      36.4,
      37.3,
      37.5,
      37.3,
      36.7,
      35.9,
      32.6,
      30.9,
      29.7,
      28.7,
      28.1,
      27.5,
      26.8,
      26.2,
      25.5,
      25.1,
      25,
      24.9,
      25.1,
      26.8,
      28.9,
      31.1,
      33.3,
      35.2,
      36.7,
      37.9,
      37.1,
      35.2,
      33.3,
      31.3,
      29.2,
      27.5,
      26.7,
      26.2,
      25.8,
      25.3,
      24.8,
      24.3,
      23.7,
      23.3,
      23.1,
      23.4,
      24,
      25.2,
      27.5,
      30.4,
      32.9,
      35,
      36.6,
      37.3,
      36.6,
      34.8,
      32.9,
      30.9,
      28.8,
      27,
      26,
      25.4,
      25,
      24.6,
      24.3,
      24.1,
      23.8,
      23.6,
      23.6,
      23.9,
      24.5,
      25.7,
      28,
      30.9,
      33.4,
      35.4,
      36.9,
      37.5,
      36.6,
      34.8,
      32.9,
      31,
      28.9,
      27.4,
      26.6,
      26.3,
      26,
      25.7,
      25.3,
      25,
      24.7,
      24.4,
      24.4,
      24.7,
      25.3,
      26.5,
      28.8,
      31.6,
      34,
      35.9,
      37.3,
      37.8,
      37.1,
      35.4,
      33.6,
      31.6,
      29.4,
      27.7,
      27,
      26.8,
      26.6,
      26.3
    ],
    "relativehumidity_2m": [
      80,
      81,
      83,
      84,
      85,
      85,
      84,
      75,
      64,
      55,
      46,
      40,
      35,
      33,
      32,
      35,
      43,
      46,
      54,
      64,
      74,
      76,
      78,
      81,
      83,
      84,
      85,
      86,
      86,
      87,
      86,
      79,
      69,
      59,
      50,
      44,
      40,
      37,
      33,
      29,
      30,
      49,
      61,
      62,
      63,
      69,
      74,
      77,
      80,
      84,
      85,
      84,
      83,
      83,
      82,
      73,
      63,
      55,
      45,
      37,
      33,
      30,
      28,
      29,
      28,
      29,
      46,
      53,
      59,
      65,
      70,
      73,
      74,
      76,
      81,
      84,
      85,
      85,
      84,
      74,
      63,
      53,
      44,
      37,
      31,
      28,
      30,
      35,
      41,
      47,
      53,
      59,
      63,
      67,
      71,
      75,
      79,
      82,
      85,
      88,
      89,
      87,
      82,
      75,
      63,
      47,
      35,
      28,
      25,
      24,
      26,
      31,
      37,
      43,
      50,
      56,
      62,
      69,
      74,
      78,
      80,
      82,
      84,
      85,
      84,
      82,
      78,
      71,
      60,
      47,
      36,
      30,
      26,
      26,
      30,
      37,
      45,
      53,
      61,
      67,
      71,
      73,
      75,
      78,
      80,
      82,
      84,
      86,
      86,
      83,
      78,
      71,
      62,
      50,
      41,
      34,
      29,
      27,
      31,
      38,
      46,
      54,
      63,
      69,
      72,
      73,
      74,
      76
    ],
    "weathercode": [
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      2,
      2,
      3,
      80,
      80,
      80,
      80,
      80,
      80,
      3,
      3,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      2,
      1,
      2,
      2,
      3,
      1,
      1,
      2,
      2,
      2,
      1,
      1,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      1,
      2,
      3,
      2,
      2,
      3,
      3,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      3,
      3,
      3,
      2,
      2,
      2,
      0,
      0,
      0,
      1,
      1,
      1,
      2,
      2,
      2,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      1,
      1,
      1,
      2,
      2,
      2,
      3,
      3,
      3,
      1,
      1,
      1,
      3,
      3,
      3,
      2,
      2,
      2,
      1,
      1,
      1,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      2,
      2,
      2,
      3,
      3,
      3,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1
    ],
    "windspeed_10m": [
      8.1,
      8.9,
      8.4,
      7.9,
      7.5,
      7.3,
      7.8,
      11.3,
      12.9,
      12.8,
      11.6,
      9.4,
      6.2,
      3.6,
      3.1,
      12.6,
      20.1,
      12.9,
      8.3,
      5.1,
      1.3,
      2.9,
      4.3,
      4.8,
      4,
      6.1,
      7.7,
      7.6,
      7.7,
      7.4,
      7.8,
      10.2,
      11.6,
      11,
      9.2,
      4.8,
      3,
      5.4,
      7.6,
      3.4,
      8.6,
      14,
      8.1,
      2.8,
      2.7,
      3.4,
      2.3,
      1.1,
      1.9,
      3,
      3.5,
      4.4,
      4.1,
      3.8,
      4.1,
      7.3,
      9.3,
      8.8,
      6.7,
      3.2,
      1.9,
      7.4,
      11.6,
      12.8,
      7.4,
      3.3,
      4.4,
      1.1,
      3.2,
      2.9,
      1.4,
      3.6,
      4.3,
      7.1,
      9.6,
      9.2,
      8.6,
      7.9,
      8.1,
      10.5,
      11.3,
      12.1,
      12.5,
      12.1,
      11.6,
      11.6,
      15.5,
      20.6,
      23.3,
      21.3,
      16.9,
      14.1,
      12.6,
      11.5,
      10.7,
      9.9,
      9,
      8.7,
      8.9,
      9.3,
      10,
      10.8,
      11.8,
      12.2,
      12,
      11.6,
      11.1,
      10.3,
      9.3,
      9.7,
      13.5,
      18.4,
      21.7,
      21.4,
      19.5,
      17.6,
      15.8,
      13.6,
      11.9,
      11.5,
      11.6,
      11.4,
      10.8,
      10.2,
      9.9,
      10.7,
      12,
      13.1,
      14.2,
      14.8,
      14.9,
      12.1,
      7.9,
      6.6,
      11.4,
      19.1,
      23.6,
      22.2,
      18.4,
      15.8,
      14.6,
      13.9,
      13.2,
      12.2,
      11.2,
      10.2,
      9.4,
      8.8,
      9,
      10.3,
      12.2,
      13.1,
      13.7,
      13.4,
      11.9,
      6.2,
      4.8,
      7.4,
      5.4,
      16.7,
      25.3,
      24.5,
      19.9,
      16.8,
      15.9,
      14.8,
      13.8,
      12.8
    ]
  }
}
    """.trimIndent()
}